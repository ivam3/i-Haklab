#!/data/data/com.termux/files/usr/bin/bash
#CREADED ON April/2022 BY @IVAM3
#UPGRADED ON 2022/apr/01
trap ctrl_c 2
IFS=$'\n\t'
ctrl_c(){ printf "$Y\n   [¿] Need a help [?]$B\nTelegram : t.me/Ivam3_Bot$W\n";}

#:: VARIABLES ::#
iHDB="https://raw.githubusercontent.com/ivam3/i-Haklab/master/.set"
IbyCDB="https://raw.githubusercontent.com/ivam3/ivam3.github.io/master/master/installer"
LIBPY=$(find ${PREFIX}/lib/ -maxdepth 1 -type d -name "python3*")
G=`echo -en "\e[32m"`
R='\033[1;31m'
Y='\033[1;33m'
B='\033[1;34m'
M='\033[1;35m'
C='\033[1;36m'
W='\033[0m'

#:: TRAPS ::#
[[ ! $(id -u) -ne 0 ]] && { printf >&2 "$R\n(➤_) You need to be a common user$W\n";exit;}
StdErr(){ printf "$R\n(➤_)$W missing argument, type PyMiR -h for help\n";exit;}

#:: BANNER ::#
Chao-chao(){ 
  if $py -m pip list|grep -oE "^${module} " >/dev/null;then
    printf "$G(➤_)$W Module $module installed successfully\n"
    r="DONE"
  else
    printf "$R(➤_)$W Module $module failed to install\n"
    r="FAIL"
  fi
  printf "$Y\n[!]-> ::::::::::::::: $r !! :::::::::::::::: <-[!]$G\n\tTo fix issues going to$B t.me/Ivam3_Bot$W\n";
}

Banner(){
	if [[ ! -e $PREFIX/bin/lolcat ]]
	then
		yes|apt install ruby >/dev/null 2>/dev/null
		gem install lolcat >/dev/null 2>/dev/null
	fi
	printf "   ______   ____  __ _ ____\n  |  _ \ \ / /  \/  (_)  _ \ \n  | |_) \ V /| |  | | | |_) |\n  |  __/ | | | |\/| | |  _ <\n  |_|    |_| |_|  |_|_|_| \_\ \n#:Python Modules Issue Resolve:#\n #:::: @Ivam3byCinderella ::::#
"
}

usage() {
	printf "$B\n(USAGE)─➤$G PyMiR -t <[B|BASIC] [BL|BLAS] [Cy|CYTHON] [L|LDFLAGS] [R|RUST] [SC|SOURCE-CODE] [S|SODIUM]>\n\t\t-p <[2|3]> -m <[name of modules]>$W\n\nOPTIONS :\n-t\tDetermines the type of installation, those could be :\n\t[B|BASIC]\t\tInstall modules with basic settings.\n\t[BL|BLASS]\t\tswitching gcc compiler\n\t[Cy|CYTHON]\t\tusing alterantive lenguaje: Cython\n\t[L|LDFLAGS]\t\tforce installation to use libraries and system compiler\n\t[R|RUST]\t\tit use a rust compiler specifying Android as target platform\n\t[SC|SOURCE-CODE]\tInstall module using an official source code from pipi.org\n\t[S|SODIUM]\t\tforce the installation to use the sodium decryptor\n\n-p\tDetermines the python version, those could be :\n\t[3] for python3\n\t[2] for python2\n\n-m Specify the module(s) to install.\n\nExamples:\n\tfixer PyMiR -t BASIC -p 3 -m pandas\n\tfixer PyMiR -t S -p 2 -m colorama requests\n";exit
}

#::::: REQUERIMENTS :::::#
Requirements(){
	printf "$G\n(➤_)$W Installing requirements (It could take a while)...\n"
	
    for req in build-essential python python-pip python2 curl tar wget ruby clang make cmake nodejs pkg-config openblas libgmp libmpc libmpc-static libmpfr libtool libxml2 libxml2-static libxml2-utils libxslt libxslt-static libsodium libsodium-static libjpeg-turbo libpng libzmq; do

		if [[ ! $(pkg list-installed 2>/dev/null|grep $req|awk -F "/" '{print $1}') ]]; then
			yes|apt install $req >/dev/null 2>/dev/null
		fi
	
    done
	
    printf "$G(➤_)$W Upgrading pip ...\n"
#	$py -m pip --no-color --quiet --no-cache-dir install --upgrade pip 2>/dev/null
    yes|apt reinstall python-pip >/dev/null 2>/dev/null
	$py -m pip --no-color --quiet --no-cache-dir install wheel 2>/dev/null
}

clear;Banner|lolcat 2>/dev/null
[[ $# -eq 0 ]] && usage

while getopts ":p:t:m:h" arg; do
	case ${arg} in
		p) [[ $OPTARG -eq 2 ]] && { py=python2;} || [[ $OPTARG -eq 3 ]] && { py=python;} || { StdErr;} ;;
		t) [[ -z $OPTARG ]] && { StdErr;} || { instaType=$OPTARG;} ;;
		m) [[ -z $OPTARG ]] && { StdErr;} || { echo $OPTARG > ${TMPDIR}/requirements.tmp;} ;;
		h) usage;;
		*) StdErr;;
	esac
done

[[ $# -lt 6 ]] && { StdErr;}
Requirements

for module in $(cat ${TMPDIR}/requirements.tmp);do
  printf "$G(➤_)$W Installing module $module (It could take a while)...\n"
  case ${module} in
		turtle)
			dir=$(mktemp -d)
			wget -q --tries=20 $iHDB/fix-tools/py_modules/turtle-0.0.2.tar.gz -O $dir/turtle-0.0.2.tar.gz
			if [[ $dir/turtle-0.0.2.tar.gz ]]
			then
				pushd $dir
				gunzip $dir/turtle-0.0.2.tar.gz
				if [[ $dir/turtle-0.0.2.tar ]]
				then
					tar -xvf turtle-0.0.2.tar
					if [[ -d $dir/turtle-0.0.2 ]]
					then
						sed 's|except ValueError, ve:|except (ValueError, ve):|g' -i \
                            $dir/turtle-0.0.2/setup.py
						$py -m pip install -e turtle-0.0.2
					fi
				fi
				popd
			fi
			rm -rf $dir 
            ;; 

        electrum|opencv|asciinema|matplotlib|scipy|apsw|bcrypt|numpy|pandas|tldp|apt|cryptography|numpy|pillow|tkinter|xcbgen)

            for i in apsw bcrypt numpy tldp apt cryptography numpy pillow tkinter xcbgen; do 
                module=python-$i 
            done 

            [[ $module == opencv ]] && { module=opencv-python;}
			[[ $module == scipy ]] && { 
                bash <(curl -fsSL "https://its-pointless.github.io/setup-pointless-repo.sh") 
                [[ $py == "python2" ]] && { module=python2-scipy;};
            }
			pkg install $module >/dev/null 2>/dev/null
			;; 

        jupyter)
            sysconf="$(find $LIBPY -name "_sysconfigdata*.py")"
            yes|pkg install clang binutils maturin pyzmq patchelf
            rm -rf $LIBPY/__pycache__ 
            cp "$sysconf" "$sysconf".O
            sed -i 's|-fno-openmp-implicit-rpath||g' "$sysconf"
            $py -m pip --no-color --quiet --no-cache-dir install jupyter 2>/dev/null
            patchelf --add-needed libpython3.11.so \
                $LIBPY/site-packages/zmq/backend/cython/_zmq.cpython-311.so
            pkg install -y matplotlib >/dev/null 2>/dev/null
            yes|apt purge rust >/dev/null 2>/dev/null 
            ;;

        *)
			case ${instaType} in 
                B|BASIC|Basic|basic)
#                    [[ $module == cryptography ]] && {
#                       yes|apt install rust >/dev/null 2>/dev/null
#                       export CARGO_BUILD_TARGET=$(rustc --version --verbose|sed -n 's|host: ||p')
#                    }

#                    [[ $module == numpy ]] && { 
#                       MATHLIB="m";yes|apt install python-numpy >/dev/null 2>/dev/null;
#                    }
                    
                    [[ $module == pandas ]] && { 
                        export CFLAGS="-Wno-deprecated-declarations -Wno-unreachable-code"
                        export MATHLIB="m"
                        $py -m pip --no-color --quiet --no-cache-dir install Cython 2>/dev/null
                        yes|apt install python-numpy python-pandas >/dev/null 2>/dev/null
                    }

#		             [[ $module == pillow ]] && {
#                       if $(uname -m|grep -q 64); then
#                           export LDFLAGS="-L/system/lib64"
#                       fi
#                    }
                    
                    [[ $module == pyzmq ]] && {
                        $py -m pip --no-color --quiet --no-cache-dir install pyzmq \
                        install-option="--libzmq=/data/data/com.termux/files/usr/lib/libzmq.so" 2>/dev/null
                    } || {
                        $py -m pip --no-color --quiet --no-cache-dir install $module 2>/dev/null
                        [[ $(command -v rustc) ]] >/dev/null && { 
                            yes|apt remove rust >/dev/null 2>/dev/null
                            if [[ -d ${HOME}/.cargo ]]; then
                                rm -rf ${HOME}/.cargo 2>/dev/null
                            fi
                        }
                    }
                    ;;

				BL|BLAS|Blas|blas)
					export BLAS=$PREFIX/lib/libblas.so
					export LAPACK=$PREFIX/lib/liblapack.so
					export CC=clang
					export CPP=clang++
					$py -m pip --no-color --quiet --no-cache-dir install $module 2>/dev/null
					;;

                Cy|cy|Cython|cython)
                    $py -m pip --no-color --quiet --no-cache-dir install Cython 2>/dev/null
                    export MATHLIB="m"
                    $py -m pip --no-color --quiet --no-cache-dir install $module 2>/dev/null
                    ;;

				L|LDFLAGS|ldflags)
					export LDFLAGS="-L/system/lib/ -lm -lcompiler_rt"
					$py -m pip --no-color --quiet --no-cache-dir install $module \
                        --global-option="build_ext" --global-option="--disable-jpeg" 2>/dev/null
				    ;;

                SC|SOURCE-CODE|source-code)
                    cd $TMPDIR
                    $py -m pip --no-color --quiet --no-cache-dir download $module 2>/dev/null
                    [[ -e $module.zip ]] && {
                        unzip $module.zip 2>/dev/null
                        [[ -d $module ]] && {
                            cd $module
                            find . -type f -not -path '*/\.*' -exec termux-fix-shebang "{}" \; 2>/dev/null
                            $py setup.py install >/dev/null 2>/dev/null
                        }
                    }
                    rm -rf $TMPDIR/$module*;cd
                    ;;

                S|SODIOUM|Sodioum|sodioum)
					export SODIUM_INSTALL=system
					$py -m pip --no-color --quiet --no-cache-dir install --no-binary :all: \
                        $module 2>/dev/null
					;;

				R|RUST|Rust|rust)
					yes|apt install rust >/dev/null 2>/dev/null
					export RUSTFLAGS=" -C lto=no"
                    export CARGO_BUILD_TARGET=$(rustc --version --verbose|sed -n 's|host: ||p')
					$py -m pip --no-color --quiet --no-cache-dir install $module 2>/dev/null
					yes|apt remove rust >/dev/null 2>/dev/null
                    if [[ -d ${HOME}/.cargo ]]; then
                        rm -rf ${HOME}/.cargo 2>/dev/null
                    fi
					;;
            esac
            ;;
    esac

    [[ -e ${TMPDIR}/requirements.tmp ]] && { rm -rf ${TMPDIR}/requirements.tmp;}
    Chao-chao
done

#@Ivam3 Ivam3byCinderella.t.me
